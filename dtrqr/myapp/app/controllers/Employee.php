<?php
/* 
 * Generated by CRUDigniter v3.4 
 * www.crudigniter.com
 */
 
class Employee extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Employee_model');
        $this->load->model('User_model');

        if($this->session->userdata('user_type') != 1) {
            redirect('employee_time');
        }
    } 

    /*
     * Listing of employees
     */
    function index()
    {       
        $data['_view'] = 'employee/index';
        $this->load->view('layouts/main',$data);
    }

    public function list() {
        $columns = array( 
                            0 =>'id', 
                            1 =>'first_name',
                            2=> 'last_name',
                            3=> 'created_by',
                            4=> 'datetime_added',
                            5=> 'datetime_updated',
                        );

        $limit = $this->input->post('length');
        $start = $this->input->post('start');
  
        $totalData = $this->Employee_model->get_all_employees_count();
            
        $totalFiltered = $totalData; 
            
        if(empty($this->input->post('search')['value']))
        {            
            $employees = $this->Employee_model->get_all_employees(['limit'=>$limit,'offset'=>$start]);
        }
        else {
            $search = $this->input->post('search')['value']; 

            $employees =  $this->Employee_model->employee_search($limit,$start,$search);

            $totalFiltered = $this->Employee_model->employee_search_count($search);
        }

        $data = array();
        if(!empty($employees))
        {
            foreach ($employees as $employee)
            {
                $created_by = $this->User_model->get_user($employee->created_by);
                $nestedData['id'] = $employee->id;
                $nestedData['first_name'] = $employee->first_name;
                $nestedData['last_name'] = $employee->last_name;
                $nestedData['created_by'] = null!==$created_by?$created_by->user_name:'User Deleted';
                $nestedData['datetime_added'] = $employee->datetime_added;
                $nestedData['datetime_updated'] = $employee->datetime_updated;
                $data[] = $nestedData;
            }
        }
          
        $json_data = array(       
                    "draw"            => intval($this->input->post('draw')),  
                    "recordsTotal"    => intval($totalData),  
                    "recordsFiltered" => intval($totalFiltered), 
                    "data"            => $data   
                    );
            
        echo json_encode($json_data);
    }

    /*
     * Adding a new employee
     */
    function add()
    {   

		$this->form_validation->set_rules('first_name','First Name','max_length[50]|required');
		$this->form_validation->set_rules('last_name','Last Name','max_length[50]|required');
		
		if($this->form_validation->run())     
        {   
            $params = array(
				'created_by' => $this->session->userdata('id'),
				'first_name' => $this->input->post('first_name'),
				'last_name' => $this->input->post('last_name'),
				'datetime_added' => date('Y-m-d H:i:s'),
				'datetime_updated' => null,
            );
            
            $employee_id = $this->Employee_model->add_employee($params);
            redirect('employee');
        }
        else
        {
            
            $data['_view'] = 'employee/add';
            $this->load->view('layouts/main',$data);
        }
    }  

    /*
     * Editing a employee
     */
    function edit($id)
    {   
        // check if the employee exists before trying to edit it
        $data['employee'] = $this->Employee_model->get_employee($id);
 
        if(isset($data['employee']->id))
        {

			$this->form_validation->set_rules('first_name','First Name','max_length[50]|required');
			$this->form_validation->set_rules('last_name','Last Name','max_length[50]|required');
		
			if($this->form_validation->run())     
            {   
                $params = array(
					'first_name' => $this->input->post('first_name'),
					'last_name' => $this->input->post('last_name'),
					'datetime_updated' => date('Y-m-d H:i:s'),
                );

                $this->Employee_model->update_employee($id,$params);            
                redirect('employee');
            }
            else
            {
				$this->load->model('User_model');
				$data['all_users'] = $this->User_model->get_all_users();

                $data['_view'] = 'employee/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The employee you are trying to edit does not exist.');
    } 

    /*
     * Deleting employee
     */
    function remove()
    {
        $employees = $this->input->post('tdel');
        foreach($employees as $employee) {
            $employee = $this->Employee_model->get_employee($employee);
            if(isset($employee->id))
            {
                $this->Employee_model->delete_employee($employee->id);
            }
            else
            {
                show_error('The employee you are trying to delete does not exist.');
            }
        }
        redirect('employee');
    }

    function my_qr($id) {
        $qr = $this->generate_qrcode($id);
        echo json_encode($qr);
    }

    /*
    |-------------------------------------------------------------------
    | Generate QR Code
    |-------------------------------------------------------------------
    |
    | @param $data   QR Content
    |
    */
    function generate_qrcode($data)
    {
        /* Load QR Code Library */
        $this->load->library('ciqrcode');
        
        /* Data */
        //$hex_data   = bin2hex($data);
        //$save_name  = $hex_data.'.png';
        $save_name = $data.'.png';

        /* QR Code File Directory Initialize */
        $dir = 'assets/media/qrcode/';
        if (!file_exists($dir)) {
            mkdir($dir, 0775, true);
        }

        /* QR Configuration  */
        $config['cacheable']    = true;
        $config['imagedir']     = $dir;
        $config['quality']      = true;
        $config['size']         = '1024';
        $config['black']        = array(255,255,255);
        $config['white']        = array(255,255,255);
        $this->ciqrcode->initialize($config);
  
        /* QR Data  */
        $params['data']     = $data;
        $params['level']    = 'L';
        $params['size']     = 10;
        $params['savename'] = FCPATH.$config['imagedir']. $save_name;
        
        $this->ciqrcode->generate($params);

        /* Return Data */
        $return = array(
            'content' => $data,
            'file'    => $dir. $save_name
        );
        return $return;
    }
    
}
