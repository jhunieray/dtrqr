<?php
/* 
 * Generated by CRUDigniter v3.4 
 * www.crudigniter.com
 */
 
class User extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('User_model');
        
        if($this->session->userdata('user_type') != 1) {
            redirect('employee_time');
        }
    } 

    /*
     * Listing of users
     */
    function index()
    {       
        $data['_view'] = 'user/index';
        $this->load->view('layouts/main',$data);
    }

    public function list() {
        $columns = array( 
                            0 =>'id', 
                            1 =>'user_name',
                            3=> 'user_type',
                            4=> 'datetime_added',
                            5=> 'datetime_modified',
                        );

        $limit = $this->input->post('length');
        $start = $this->input->post('start');
  
        $totalData = $this->User_model->get_all_users_count();
            
        $totalFiltered = $totalData; 
            
        if(empty($this->input->post('search')['value']))
        {            
            $users = $this->User_model->get_all_users(['limit'=>$limit,'offset'=>$start]);
        }
        else {
            $search = $this->input->post('search')['value']; 

            $users =  $this->User_model->user_search($limit,$start,$search);

            $totalFiltered = $this->User_model->user_search_count($search);
        }

        $data = array();
        if(!empty($users))
        {
            foreach ($users as $user)
            {
                $nestedData['id'] = $user->id;
                $nestedData['user_name'] = $user->user_name;
                $nestedData['user_type'] = $user->user_type == 1 ? 'Super Admin' : 'Admin';
                $nestedData['datetime_added'] = $user->datetime_added;
                $nestedData['datetime_modified'] = $user->datetime_modified;
                $data[] = $nestedData;
            }
        }
          
        $json_data = array(       
                    "draw"            => intval($this->input->post('draw')),  
                    "recordsTotal"    => intval($totalData),  
                    "recordsFiltered" => intval($totalFiltered), 
                    "data"            => $data   
                    );
            
        echo json_encode($json_data);
    }

    /*
     * Adding a new user
     */
    function add()
    {   

		$this->form_validation->set_rules('user_name','User Name','max_length[50]|required|is_unique[user.user_name]|alpha_numeric', array('is_unique' => 'Username is not available.'));
		$this->form_validation->set_rules('user_type','User Type','integer');
		$this->form_validation->set_rules('user_password','User Password','regex_match[/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@#$()!%*?&])[A-Za-z\d@#$()!%*?&]{10,}$/]');
		
		if($this->form_validation->run())     
        {   
            $params = array(
				'user_type' => $this->input->post('user_type'),
				'user_password' => password_hash($this->input->post('user_password'),PASSWORD_DEFAULT),
				'user_name' => $this->input->post('user_name'),
				'datetime_added' => date('Y-m-d H:i:s'),
				'datetime_modified' => null,
            );
            
            $user_id = $this->User_model->add_user($params);
            $return = ['status' => 'success'];
        }
        else
        {       
            $return = ['status' => 'fail', 'error' => form_error('user_name').' '.form_error('user_password').' '.form_error('user_type')];     
        }
        echo json_encode($return);
    }  

    /*
     * Editing a user
     */
    function edit($id)
    {   
        // check if the user exists before trying to edit it
        $data['user'] = $this->User_model->get_user($id);
        
        if(isset($data['user']->id))
        {

			$this->form_validation->set_rules('edit_user_type','User Type','integer');
		
			if($this->form_validation->run())     
            {   
                $params = array(
					'user_type' => $this->input->post('edit_user_type'),
					'datetime_modified' => date('Y-m-d H:i:s'),
                );

                $this->User_model->update_user($id,$params);            
                $return = ['status' => 'success'];
            }
            else
            {
                $return = ['status' => 'fail', 'error' => form_error('edit_user_type')];     
            }
        }
        else {
            $return = ['status' => 'fail', 'error' => 'The user you are trying to edit does not exist.'];
        }
        echo json_encode($return);
    } 

    /*
     * Change Password
     */
    function cp($id)
    {   
        // check if the user exists before trying to edit it
        $data['user'] = $this->User_model->get_user($id);
        
        if(isset($data['user']->id))
        {

            $this->form_validation->set_rules('edit_cp_password','User Password','regex_match[/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@#$()!%*?&])[A-Za-z\d@#$()!%*?&]{10,}$/]');
        
            if($this->form_validation->run())     
            {   
                $params = array(
                    'user_password' => password_hash($this->input->post('edit_cp_password'),PASSWORD_DEFAULT),
                    'datetime_modified' => date('Y-m-d H:i:s'),
                );

                $this->User_model->update_user($id,$params);            
                $return = ['status' => 'success'];
            }
            else
            {
                $return = ['status' => 'fail', 'error' => form_error('edit_cp_password')];     
            }
        }
        else {
            $return = ['status' => 'fail', 'error' => 'The user you are trying to edit does not exist.'];
        }
        echo json_encode($return);
    } 

    /*
     * Deleting user
     */
    function remove()
    {
        $users = $this->input->post('tdel');
        foreach($users as $user) {
            $user = $this->User_model->get_user($user);
            if(isset($user->id))
            {
                $this->User_model->delete_user($user->id);
            }
            else
            {
                show_error('The user you are trying to delete does not exist.');
            }
        }
        redirect('user');
    }
    
}
